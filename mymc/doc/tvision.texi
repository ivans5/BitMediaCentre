\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename tvision.info
@settitle TVision library installation handbook
@setchapternewpage odd
@c %**end of header

@ifinfo
Copyright @copyright{} 1997-2001 Sergio Sigala <sergio@@sigala.it>.
@end ifinfo

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@titlepage
@sp 10
@center @titlefont{Installation handbook for the TVision library}
@subtitle TVision 0.8 (UNIX port of Borland's Turbo Vision 2.0)
@author Sergio Sigala

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1997-2001 Sergio Sigala <sergio@@sigala.it>.
@end titlepage

@c ---------------------------------------------------------------------------
@dircategory Programming tools
@direntry
* TVision: (tvision).               The TVision library: installation handbook
@end direntry

@c ---------------------------------------------------------------------------
@node Top, Overview, (dir), (dir)
@c    node-name, next, previous, up

This document covers the installation and operation of TVision under the
FreeBSD and Linux operating systems.

@menu
* Overview::              An overview of the TVision package.
* Reporting Bugs::        Submitting effective bug reports.
* File Structure::        Notes on the file hierarchy.
* Copyright::             This copyright license says how you can copy and
                          use TVision.

* Portability issues::    The portability of the package.
* Keyboard::              The keyboard handling.
* Screen::                The screen handling.
* Mouse::                 The mouse handling.
* Environment Variables:: The user modifiable environment variables.

* Compiling TVision::     How to compile the library.
* Resources::             A list of useful sites.

* Credits::               Contributors and useful links.
* Author address::        To send him a nice postcard.
@end menu

@c ---------------------------------------------------------------------------
@node Overview, Reporting Bugs, Top, Top
@c    node-name, next, previous, up

@chapter Overview
Turbo Vision (or TV, for short) is a library that provides an application
framework.  With TV you can write a beautiful object-oriented character-mode
user interface in a short time.

TV is available in C++ and Pascal and is a product of Borland International.
It was developed to run on MS-DOS systems, but today it is available for many
other platforms (ported by independent programmers).

This port is based on the Borland 2.0 version with fixes.  Original Turbo
Vision 2.0 sources should be available at:

@url{ftp://ftp.borland.com/pub/borlandcpp/devsupport/archive/turbovision}

@url{ftp://ftp.inprise.com/pub/borlandcpp/devsupport/archive/turbovision}

See the @ref{Credits} section for a list of other useful sites.

@c ---------------------------------------------------------------------------
@node Reporting Bugs, File Structure, Overview, Top
@c    node-name, next, previous, up

@chapter Reporting Bugs
We welcome bug reports or suggestions for the TVision system, both programs
and documentations.  Please email them to @email{sergio@@sigala.it}.  You can
download the latest version of TVision from
@url{http://www.sigala.it/sergio/tvision}.

For bug reports, please include enough information for the maintainers to
reproduce the problem.  Generally speaking, that means:

@itemize @bullet
@item the version number of TVision and the program(s) involved;

@item hardware, operating system, and compiler versions;

@item any unusual options you gave to @file{configure};

@item the list of actions and/or the contents of any input files necessary to
reproduce the bug;

@item a description of the problem and samples of any erroneous output;

@item anything else that you think would be helpful.
@end itemize

When in doubt whether something is needed or not, include it.  It's better to
include too much than to leave out something important.

Patches are most welcome; if possible, please make them with
@w{@samp{diff -ru}} (see @xref{Top, , Overview, diff, The diff program}, for
details).

When sending email, please do not encode or split the messages in any way if
possible; it's much easier to deal with one plain text message, however large,
than many small ones.

@c ---------------------------------------------------------------------------
@node File Structure, Copyright, Reporting Bugs, Top
@c    node-name, next, previous, up

@chapter File Structure
A few notes on the file hierarchy used in this package.

@itemize @bullet
@item Directory @file{doc} and its subdirectories contain all the
documentation of the library, along with this manual.

@itemize @minus
@item @file{html/index.html} is the main page of the documentation. From there
you can reach both the @dfn{installation handbook} and the @dfn{class hierarchy
documentation}. Starting explorations from this page is highly recommended,
since this file will always stay there in all future versions of the library.
Anyway, you can alternatively open the various files individually, following
the instructions given below.

@item @file{tvision.info} is the Texinfo version of this manual, hereinafter
called @dfn{installation handbook}. It contains information regarding
installation, keyboard handling, screen manipulation, environment variables
and mouse support. You should take a look at it before using the library. Just
type @w{@samp{info -f tvision.info}} to proceed.
The Texinfo format allows searching for topics, commands and functions from
the many indices.

@file{tvision.info} was automatically extracted from @file{tvision.texi} with
the program @samp{makeinfo}.
The command @w{@samp{texi2dvi tvision.texi}} will output @file{tvision.dvi},
which can then be processed with @samp{dvips} and optionally @samp{gs}
(Ghostscript) to produce a nicely formatted printed manual. See
@ref{Top, , Overview, Texinfo, The Texinfo format}, and
@xref{Top, , Getting Started, info, The info program}, for more about the
Texinfo documentation system.

@item @file{html/tvision.html} is the html version of these installation
notes, automatically produced by applying the @samp{texi2html} utility to
file @file{tvision.texi}. Since it is built automatically the output may
appear ugly, so don't blame me.

@item Files @file{html/hierarchy.html}, @file{html/classes.html},
@file{html/annotated.html}, @file{html/files.html}, @file{html/functions.html}
and @file{html/globals.html} are the main pages of the @dfn{class hierarchy
documentation}. These information describe each class, its methods and data
members with some degree of detail.

To produce this documentation, I annotated each class directly in the header
file (.h) where it appears. Then I ran @samp{doxygen}, a powerful
documentation extractor available from
@url{http://www.doxygen.org/index.html} or from
@url{http://www.stack.nl/~dimitri/doxygen/download.html}. It automatically
fetches these information and generates a nice html manual.
@end itemize

@item Directory @file{lib} contains all the sources of the library, both header
(.h) and program (.cc) files.  Object files (.lo, .o) and the generated
library files (libtvision.a, libtvision.la) are also placed here, after a
successful compilation.

Before compiling the library, a trick in @file{Makefile.am} creates a symbolic
link named @file{tvision} to this same directory.  This recursive link allows
the smooth compilation of the various source files, because all of them try to
include @file{tvision/tv.h}.

@file{tv.h} is the only header every application needs to include.  It
automatically includes the required TVision header files by looking at the
various @samp{Uses_XXXX} macros.  If one macro is defined the relevant header
is included.

@item Directory @file{demo} presents a complete application made with this
library, named @samp{demo}.  It shows how to use predefined views, how to
subclass them to create custom views, how to handle the various events and how
to deal with the online help system.  It also gives some advises on how to
store and recover views to and from streams.

@item Directory @file{tutorial} contains a lot of simple examples.  Read file
@file{README} in that directory to know exactly what each program does.
File @file{basicMakefile} is a simple makefile template you can easily modify
to build your own programs.

@item Finally, directory @file{tvhc} includes the help compiler, the default
program used to translate a source help file in the binary form TVision
internally uses.  Some documentation for it is given there in file
@file{README}.
@end itemize

@c ---------------------------------------------------------------------------
@node Copyright, Portability issues, File Structure, Top
@c    node-name, next, previous, up

@chapter Copyright
@quotation
All changes copyright (c) 1997-2001 Sergio Sigala, Brescia, Italy.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

@enumerate
@item Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
@item Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
@end enumerate

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@end quotation

Warning: this BSD-style copyright is applicable only to the modifications
brought by Sergio Sigala to the original code.  Borland has released the code
to the public, but still owns the original copyright (see file @file{lib/tv.h}
for instance).

Other contributors have their respective copyright.

@c ---------------------------------------------------------------------------
@node Portability issues, Keyboard, Copyright, Top
@c    node-name, next, previous, up

@chapter Portability issues
The TV library was originally written to run on 80x86 processor.  These
processors are little-endian and the original library assumes this as a
premise.  In fact, some code may not run properly on big-endian machines.
This means it requires a big effort to make the library fully portable across
all Unix machines.

I made various changes in the code to make it run correctly under big-endian
machines.  I tested it with a PowerPC running Linux and it works fine (maybe
some other minor changes are required).

Another problem is the massive usage of the PC-specific character set.  This
usually gives a nice look when the applications run in the system console, but
can show very annoying characters when they run in a remote terminal or under
a X shell.

@c ---------------------------------------------------------------------------
@node Keyboard, Screen, Portability issues, Top
@c    node-name, next, previous, up

@chapter Keyboard
The ncurses library is systematically used in TVision to perform keyboard
input, and usually to do video output also.  These routines give the user a
terminal-independent method for getting input characters and to update
character screens with reasonable optimization.  The name @samp{ncurses}
stands for `new curses' and is the approved replacement for the 4.4BSD classic
@samp{curses} library, which has been discontinued.

More specifically, the ncurses package supports:

@itemize @bullet
@item output to windows and reading terminal input;
@item control over terminals and their input and output capabilities;
@item some color manipulation;
@item terminfo capabilities;
@item access to low-level terminal-manipulation routines.
@end itemize

In addition to drawing characters on the screen, video attributes and colors
may be supported, causing the characters to show up in such modes as
underlined, in  reverse video, or in color on terminals that support such
display enhancements.  Line drawing characters may be specified to be output.
On input, ncurses is also able to translate arrow and function keys that
transmit escape sequences into single value integers.  Type
@w{@samp{man ncurses}} for more.

Under Linux a special output mechanism called VCS, which gives direct access
to the console screen memory, may be used.  This is noticeably faster than the
standard ncurses output.  See @ref{Screen} for details.

@heading Key combinations
Two notes, whose applicability is strictly dependent on the operating system
you are using:

@itemize @bullet
@item Under FreeBSD @key{ALT} combinations aren't currently supported.  You can
emulate them with @key{ESC} sequences.  To perform an @key{ALT} emulation you
should press @key{ESC} followed by the required letter key within some tenth of
second.  The default time interval is 0.4 seconds, see file @file{system.cc}
for further details on how to change it.

For example, to generate the @kbd{Alt-X} combination press @kbd{ESC X}.  To
generate @key{ESC} alone press it once and wait 0.4 seconds or press it twice.
If the second key is pressed outside the time interval, the entire sequence is
treated like two ordinary key presses are.

Support for @key{CTRL} and @key{SHIFT} key combinations is also missing.

@item Under Linux @key{ALT} combinations are usable only when you run
applications from the system console.  In this mode the library can easily
detect the state of @key{ALT}, @key{CTRL} and @key{SHIFT} keys by using a
Linux-specific system call (@samp{TIOCLINUX}, see @file{sys/kd.h} for
more), so strange combinations like @samp{kbCtrlLeft} are always possible.
In other environments (namely remote terminals and X shells) these sequences
can't be detected, so you need to compose the same sequences seen above for
FreeBSD.
@end itemize

@c ---------------------------------------------------------------------------
@node Screen, Mouse, Keyboard, Top
@c    node-name, next, previous, up

@chapter Screen
A few, useful notes about screen handling.

@heading The importance of SIGWINCH
The @samp{SIGWINCH} signal is always hooked, so we can resize the screen at
runtime and the application will adapt itself.  Obviously, this capability is
especially useful in X shells.

@heading Two drawbacks of ncurses
Like mentioned previously, the ncurses library is usually used to perform
video output.  This should work well under any operating system, in any kind of
terminal (system console, dumb terminal or X shell).  But there are at least
two problems with this otherwise perfectly portable solution:

@enumerate
@item This mechanism can't output all the 256 characters the 8 bit encoding
would permit, including those nice semi-graphical signs usually used in
text-mode applications on PCs.  Since TVision uses them all (to draw frames,
window icons and various other views), your application may appear
graphically poor.

@item This mechanism is slow.  On the system console it's slower on Linux than
FreeBSD, because of the advanced system FreeBSD uses to update the screen
memory.  Equally slow on the other kinds of terminal.  This limit appears
noticeably on 486 and low-end Pentiums.
@end enumerate

There is no way to speedup this process without doing some low-level,
operating-system-specific trickery, necessarily non portable across the
various operating systems.

@heading The Linux way: virtual console mode versus remote mode
Linux has a special output mechanism called VCS (or VCSA), which gives direct
access to the screen memory.  VCS stands for @dfn{virtual console system}.

This mechanism is a lot faster than the standard ncurses output; we'll call it
@dfn{virtual console mode}.  For clearness, we'll refer to the conventional,
ncurses-based output approach, as @dfn{remote mode}.  Not surprising, this
facility is capable of displaying all of the 256 characters with all colors
the graphic adapter allows, so it fixes the first problem too.

The Linux kernel provides a handful of special devices which refer to the
memories of the various virtual consoles; they are described below:

@itemize @bullet
@item @file{/dev/vcs0} is a character device with major number 7 and minor
number 0, usually of mode 0644 and owner root.tty.  It refers to the memory of
the currently displayed virtual console terminal.

@item @file{/dev/vcs[1-63]} are character devices for virtual console
terminals, they have major number 7 and minor number 1 to 63, usually mode
0644 and owner root.tty.

@item @file{/dev/vcsa[0-63]} are the same as above, but including attributes,
and prefixed with four bytes giving the screen dimensions and cursor position:
lines, columns, x and y.
@end itemize

These devices replace the screendump ioctls of @samp{console(4)}, so the
system administrator can control access using file system permissions.  Your
application may require root privileges, in order to gain access to these
devices.  Type @w{@samp{man vcs}} for more.

If not already present, the devices for the first eight virtual consoles may
be created by:

@example
for x in 0 1 2 3 4 5 6 7 8; do
        mknod -m 644 /dev/vcs$x c 7 $x;
        mknod -m 644 /dev/vcsa$x c 7 $[$x+128];
done
chown root:tty /dev/vcs*
@end example

Alternatively, you may try the following script, taken from the @w{Midnight
Commander}, which builds all the 64 devices:

@example
#!/bin/sh
#
# Script by Jakub Jelinek
#
if test -e /dev/vcs0
then
        exit
fi

I=0
while [ $I -lt 64 ] 
do
        mknod /dev/vcs$I c 7 $I
        chmod 622 /dev/vcs$I
        chown root.tty /dev/vcs$I
        mknod /dev/vcsa$I c 7 `expr $I + 128`
        chmod 622 /dev/vcsa$I
        chown root.tty /dev/vcsa$I
        I=`expr $I + 1`
done
@end example

@heading Conclusions on Linux
Under Linux every program can run in two ways:

@itemize @bullet
@item @dfn{Virtual console mode} is the fastest output method and should be
automatically selected when you start your application from the system
console and it has the required write privileges.  Its output goes directly to
the display via one of the various @file{/dev/vcsa*} devices.

@item @dfn{Remote mode} is used when you run the application from a remote
terminal, under telnet, in a X shell or in the system console but it has not
write privileges to the @file{/dev/vcsa*} devices.  Its output goes to the
display via standard out, so it's very slow compared to the former.
@end itemize

In any case, colors are used if the terminal supports them.  Otherwise, a
monochrome palette with bold and inverse attributes is used to mark the text.

@heading Two notes on FreeBSD
@itemize @bullet
@item FreeBSD lacks a mechanism like VCS.  But it does not really need it,
because his conventional ncurses output is moderately fast thanks to the
peculiar screen updating technique it uses.

@item The last screen line is not used because otherwise the display will
scroll up (it's an example of the @dfn{last character syndrome}, which
sometimes affects computer programs).
@end itemize

@c ---------------------------------------------------------------------------
@node Mouse, Environment Variables, Screen, Top
@c    node-name, next, previous, up

@chapter Mouse
The mouse handling varies a lot, depending on the operating system you are
using.  If you need to change some timing see the @file{system.cc} file.

@heading Mouse support under FreeBSD
The library requires the @samp{moused} daemon to be loaded.  See the moused
man page (by typing @w{@samp{man moused}}) for more details.  For example, if
you have a Microsoft compatible mouse connected to COM1, you should issue this
command:

@example
moused -p /dev/cuaa0 -t microsoft
@end example

By using the @samp{TVOPT} environment variable, you can modify the shape of
the cursor.  Setting it to @samp{noarrow} disables the arrow pointer; the
block pointer will instead be used.  See the @ref{Environment Variables}
section for more.

@heading Mouse support under Linux
The library requires @samp{Gpm}.  The Gpm package is a mouse server for the
Linux console.  It is meant to provide cooked mouse events to text-only
applications, such as editors and simple menu-based programs.  I tested
TVision with Gpm version 1.18.1.

@c ---------------------------------------------------------------------------
@node Environment Variables, Compiling TVision, Mouse, Top
@c    node-name, next, previous, up

@chapter Environment Variables
By setting the two environment variables @samp{TVLOG} and @samp{TVOPT}, you
can modify the way TVision applications act on your system.

@heading TVLOG
With @samp{TVLOG} you can force TVision to write a log file.  For example, the
following line will produce a log file named @samp{mylog} when the application
is executed:

@example
TVLOG=mylog
@end example

The log file creation can be suppressed by assigning an empty string to this
variable.

@heading TVOPT
You can modify some of the behavior of the library by defining the other
environment variable @samp{TVOPT}.  This variable is a set of strings
separated by one or more space characters.  Valid strings are:

@table @samp
@item cyrillic
enables cyrillic character set mapping (for Linux and VCS only).  See
@ref{Screen} for more about VCS.

@item latin
enables latin character set mapping (for Linux and VCS only).  See
@ref{Screen} for more about VCS.

Note: this option and the one above are useful only when the VCS is enabled;
in any other mode the application should automatically select the correct
mapping, thanks to the translation kindly done by ncurses and the operating
system.

@item noarrow
disables the arrow pointer (FreeBSD only); the block pointer will instead be
used.  See @ref{Mouse} for more about mouse handling.

@item nogpm
disables support for the Gpm mouse driver (Linux only); the application
will run without mouse.  See @ref{Mouse} for more about mouse handling.

@item novcs
inhibits the use of VCS to do video output (Linux only); the application will
always use remote mode.  See @ref{Screen} for more about VCS.
@end table

@heading Examples for the Bourne shell
@example
export TVOPT=nogpm         @expansion{} does not use Gpm
export TVOPT="nogpm novcs" @expansion{} disables both Gpm and VCS
export TVOPT=              @expansion{} cleans the environment variable
@end example

@heading Examples for the C shell
@example
setenv TVOPT nogpm         @expansion{} does not use Gpm
setenv TVOPT "nogpm novcs" @expansion{} disables both Gpm and VCS
unsetenv TVOPT             @expansion{} cleans the environment variable
@end example

@c ---------------------------------------------------------------------------
@node Compiling TVision, Resources, Environment Variables, Top
@c    node-name, next, previous, up

@chapter Compiling TVision
This section gives you some information for installing TVision.  For further
details please read the @file{INSTALL} file that can be found in the root
directory of the source package.

@itemize @bullet
@item Type @samp{./configure} to automatically detect the system features.

@item Type @samp{make} in the main directory to compile all the sources.  This
creates both the static and dynamic libraries.  Libraries are placed in
directory @samp{lib} with source files.  The @samp{demo} example and the
tutorials are statically linked against the TVision library.

@item Type @w{@samp{make install}} to install the library in
@file{/usr/local/include} and @file{/usr/local/lib}.  The default prefix
directory is thus @samp{/usr/local} and it's automatically selected by
@samp{configure} if you missed to specify a custom prefix directory with
the option @w{@samp{--prefix=PATH}}.

@item Type @w{@samp{make uninstall}} to remove the library.

Note: this command and the previous (@w{@samp{make install}}) both need root
privileges and should possibly be followed by @samp{ldconfig} to update the
linker cache.

@item Type @w{@samp{make clean}} in the main directory to remove objects,
backup files and executables in the main directory and in all the
subdirectories.

@item Type @w{@samp{make dist}} to build the distribution package.
@end itemize

@heading Quick start
To start, just say @samp{./configure && make} to your shell.  Binaries are not
released with the package because it's safer for you to compile the package by
yourself.

@c ---------------------------------------------------------------------------
@node Resources, Credits, Compiling TVision, Top
@c    node-name, next, previous, up

@chapter Resources
Please connect to @url{http://www.sigala.it/sergio/tvision} for fresh
resources. It is the official TVision site, from which you can download the
latest version of the package; there is a number of example programs too.

@c ---------------------------------------------------------------------------
@node Credits, Author address, Resources, Top
@c    node-name, next, previous, up

@chapter Credits
The following are most of the contributors, listed in chronologic order.
Sorry if I missed somebody (please contact me in case I did,
@email{sergio@@sigala.it}).

@itemize @bullet
@item Vasily Egoshin @email{wasa@@nica.marstu.mari.su}
@item Rainer Keuchel @email{r_keuchel@@smaug.netwave.de}
@item Martynas Kunigelis @email{algikun@@santaka.sc-uni.ktu.lt}
@item Bonni Mierzejewska @email{u6ed4@@wvnvm.wvnet.edu}
@item Ruslan V. Brushkoff @email{ruslan@@Baby.TM.Odessa.UA}
@item Dmitrij Korovkin @email{tkf@@glasnet.ru}
@item Sergey Clushin @email{serg@@lamport.ru} @email{Clushin@@deol.ru}
@item Harald Hoyer @email{HarryH@@Royal.Net}
@item John Polstra @email{jdp@@polstra.com}
@item Pedro F. Giffuni @email{giffunip@@asme.org}
@item Vitaly Fedrushkov @email{willy@@snowyowl.csu.ac.ru}
@item Piotr Klaban @email{makler@@man.torun.pl}
@item Artur Harasimiuk @email{maniak@@qna.softomat.com.pl}
@item Thorsten Dittmar @email{dittmar@@Mathematik.Uni-Marburg.de}
@item Javor Dimitrov @email{logix@@dobrich-sat.net}
@end itemize

@c ---------------------------------------------------------------------------
@node Author address, , Credits, Top
@c    node-name, next, previous, up

@chapter Author's address
@flushleft
Sergio Sigala @email{sergio@@sigala.it}
Viale De Gasperi, 8
25041 Boario Terme (BS)
Italy
@end flushleft

@c ---------------------------------------------------------------------------
@bye
